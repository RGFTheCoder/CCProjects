{
  sys = {
    os = {
      llsh = {
        [ "startup.lua" ] = "print(\"Low-level Shell\")\
print(\"Be careful\")\
print(\"You can break stuff here\")\
shell.run(\"/rom/programs/shell.lua\")",
      },
      atlan = {
        [ "startup.lua" ] = "local fs = require(\"/sys/bin/apis/pfs\")\
\
fs.makeDir(0,\"/testicles/high\")",
      },
      [ "0settings" ] = {
        [ "startup.lua" ] = "os.run({}, \"/sys/bin/settings.lua\")",
      },
      [ "0addOS" ] = {
        [ "startup.lua" ] = "local data = http.get('https://raw.githubusercontent.com/RGFTheCoder/CCProjects/master/Bios/OSes/List').readAll()\
\
local json = require(\"/sys/bin/apis/json\")\
-- print(data)\
local osList = json.decode(data)\
\
for id, link in pairs(osList) do\
    print(id)\
end\
\
write(\"Enter OS Name: \")\
local input = read()\
\
print(osList[input])\
shell.run(\"wget \"..osList[input]..\" /temp/ospkg\")\
shell.run(\"archive unpack /temp/ospkg /sys/os/\"..input..\"/\")\
-- os.run({}, \"/sys/bin/settings.lua\")",
      },
    },
    conf = {
      [ "main.lua" ] = "{\
  [ \"shell.allow_disk_startup\" ] = true,\
  [ \"bios.delay\" ] = \"1\",\
  [ \"shell.allow_startup\" ] = true,\
  [ \"hlsh.prompt\" ] = \"/${dir} $ \",\
  [ \"edit.default_extension\" ] = \"lua\",\
  [ \"shell.autocomplete\" ] = true,\
  [ \"lua.autocomplete\" ] = true,\
  [ \"bios.biosAccess\" ] = \"false\",\
  [ \"hlsh.path\" ] = \"/sys/os/hlsh/programs;/sys/bin\",\
  [ \"bios.defaultOS\" ] = \"\",\
  [ \"paint.default_extension\" ] = \"nfp\",\
  [ \"bios.use_multishell\" ] = true,\
  [ \"edit.autocomplete\" ] = true,\
  [ \"list.show_hidden\" ] = false,\
}",
    },
    disks = {
      atlan = {},
      hlsh = {},
      llsh = {},
    },
    bin = {
      [ "archive.lua" ] = "local argv = argv or {...}\
\
function saveFile(file, data)\
    local f = fs.open(file, \"w\")\
    f.write(data)\
    f.close()\
end\
\
function readFile(file)\
    if fs.exists(file) then\
        local f = fs.open(file, \"r\")\
        local inside = f.readAll()\
        f.close()\
        return inside\
    end\
end\
\
function tableToFile(t, folder)\
    if not fs.exists(folder) then fs.makeDir(folder) end\
    \
    for k, v in pairs(t) do\
        if type(v) == \"table\" then\
            tableToFile(v, folder .. \"/\" .. k)\
        end\
        if type(v) == \"string\" then\
            saveFile(folder .. \"/\" .. k, v)\
        end\
    end\
end\
\
function filelistToTable(folder)\
    local toReturn = {}\
    local t = fs.list(folder)\
    for i = 1, #t do\
        if fs.isDir(folder .. \"/\" .. t[i]) then\
            toReturn[t[i]] = filelistToTable(folder .. \"/\" .. t[i])\
        else\
            toReturn[t[i]] = readFile(folder .. \"/\" .. t[i])\
        end\
    end\
    return toReturn\
end\
\
function printUsage()\
    print \"archive pack <folder> <archive>\"\
    print \"archive compress <folder> <archive>\"\
    print \"archive unpack <archive> <folder>\"\
    print \"archive extract <archive> <folder>\"\
    print \"archive installer <archive> <installer>\"\
    print \"archive selfextract <archive> <installer>\"\
end\
\
if argv[1] == \"pack\" or argv[1] == \"compress\" then\
    if #argv < 3 then printUsage() return end\
    local Archive = {}\
    \
    if fs.exists(argv[2]) then\
        print \"done prepairing, making archive\"\
        Archive = filelistToTable(argv[2])\
        print \"done making archive now saving\"\
        saveFile(argv[3], textutils.serialize(Archive))\
        print \"done saving archive\"\
    else\
        print \"folder does not exist\"\
    end\
\
end\
\
if argv[1] == \"unpack\" or argv[1] == \"extract\" then\
    if #argv < 3 then printUsage() return end\
    \
    print \"unpacking/extracting...\"\
    tableToFile(textutils.unserialize(readFile(argv[2])), argv[3])\
    print \"unpacking/extracting complete\"\
\
end\
\
if argv[1] == \"installer\" or argv[1] == \"selfextract\" then\
    print(\"how is should the archive/program be called?\")\
    local name = read()\
    \
    print(\"what is the folder to install extract it in? leave blank if you want to let the user enter one\")\
    local instdir = read()\
    \
    print(\"what is the message for installing it?\")\
    local msg = read()\
    \
    print(\"what os the message when its done?\")\
    local msgdone = read()\
    \
    print(\"what program should it execute when its done? leave blank for none\")\
    local doneexe = read()\
    \
    local s = [[\
 local archive = ]]\
        .. readFile(argv[2]) .. [[ \
 local installfolder = ']]\
        .. instdir .. [['\
 local name = ']]\
        .. name .. [[' \
 local msg = ']]\
        .. msg .. [[' \
 local msgdone = ']]\
        .. msgdone .. [[' \
 local doneexe = ']]\
        .. doneexe .. [[' \
 \
 function saveFile( file, data )\
  local f = fs.open( file, 'w' )\
  f.write( data )\
  f.close( )\
 end\
 \
 function tableToFile( t, folder )\
  if not fs.exists( folder ) then fs.makeDir( folder ) end\
  for k, v in pairs( t ) do\
   if type( v ) == 'table' then\
    tableToFile( v, folder..'/'..k )\
   end\
   if type( v ) == 'string' then\
    saveFile( folder..'/'..k, v )\
   end\
  end\
 end\
 \
 if installfolder == '' then\
  print 'please enter the folder where the archive is going to be installed in'\
  installfolder = read( )\
 end\
 print( msg ) \
 tableToFile( archive, installfolder )\
 print( msgdone )\
 if doneexe ~= \"\" then shell.run( doneexe ) end\
 ]]\
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    \
    local handle = io.open(argv[3], \"w\")\
    handle:write(s)\
    handle:close()\
    print \"done making installer/self extractor\"\
end",
      [ "tar.lua" ] = "--[[ MADE BY COLUMNA1 PLEASE DONT DISTRIBUTE WITHOUT PERMISSION ]]--\
\
--update code\
local err = true\
\
if http then\
  local version = \"1.1\"\
  local data = version\
  local up = http.get(\"http://pastebin.com/raw.php?i=PCjGdaM5\")\
  if up then\
    data = up.readAll()\
    up.close()\
  else\
    print(\"Error grabbing update data.\")\
	data = nil\
  end\
  if data and version ~= data then\
   	print(\"Updating...\")\
	local pro = shell.getRunningProgram()\
	local prog = http.get(\"http://pastebin.com/raw.php?i=bcgmNT2Q\")\
	if prog then\
	  local data2 = prog.readAll()\
	  prog.close()\
	  fs.delete(pro)\
	  file = fs.open(pro,\"w\")\
	  file.write(data2)\
	  file.close()\
	  err = false\
	  print(\"Finished updating please run again.\")\
	else\
	  print(\"Problem grabbing update.\")\
	end\
  end\
end\
\
\
local argv = argv or {...}\
\
local function printUsage()\
  term.setTextColor(colors.red)\
  print(\"Usage: \\\"tar c directory file.tar\\\" or \\\"tar u file\\\"\")\
  print(\"THIS PROGRAM USES ABSOLUTE PATHS!!\")\
  term.setTextColor(colors.white)\
  err = false\
end\
\
\
if #argv < 1 and err then\
  printUsage()\
end\
\
if err then\
  if string.lower(argv[1]) == \"u\" or string.lower(argv[1]) == \"c\" then\
    if string.lower(argv[1]) == \"c\" and argv[2] then\
      if argv[2] == \"/\" then\
        argv[2] = \"\"\
      else\
        if not fs.isDir(argv[2]) then\
          err = false\
          printUsage()\
          error(\"argvument isnt a directory\")\
        end\
        if fs.exists(argv[3]) or not argv[3] then\
          err = false\
          printUsage()\
          error(\"No destination provided/destination exists\")\
        end\
      end\
    elseif string.lower(argv[1]) == \"u\" and argv[2] then\
      if not fs.exists(argv[2]) then\
        err = false\
        print(\"no file found\")\
        printUsage()\
      end\
    else\
      err = false\
      printUsage()\
    end\
  else\
      err = false\
      printUsage()\
  end\
end\
\
local function unPack()\
  local blank = 0\
  local block = 0\
  local curbyte = 0\
  local file = fs.open(argv[2],\"rb\")\
  \
  local function readByte() curbyte = curbyte + 1 if curbyte == 512 then curbyte = 0 ; block = block + 1 end return file:read(1) end\
  local function readString(num) local str = \"\" ; for i = 1,num do local byt = readByte() ; if byt ~= 0 then str = str..string.char(byt) end end; return str end\
  local function readBytes(num) local tab = {} ; for i = 1,num do tab[#tab+1] = readByte() end return tab end\
  --function octal_bytes_to_int(str,size) size = size + 1 ; local out = 0 ; local pos = size - 1 ; while pos > 0 do if str[size-pos] ~= 32 and str[size-pos] ~= 0 then out = out * 8 + tonumber(string.char(str[size-pos])) end pos = pos - 1 end return out end\
  local function octal_to_int(str,size) return tonumber(str:sub(0,size),8) or \"\" end\
  local function afterFileSkip() if curbyte > 0 then readString(512-curbyte) ; curbyte = 0 ; block = block + 1 end end\
  local function dumpFile(nam,size) local fi = fs.open(\"/\"..nam,\"wb\") if not fi then print(\"ERROR NO FILE\") end for i = 1,size do fi.write(readByte()) end fi.close() ; afterFileSkip() end\
\
  --read headder\
  local dump = \"\"\
  local function readFileHeader()\
    local name = readString(100)\
    local mode = readBytes(8)\
    local uid = readBytes(8)\
    local gid = readBytes(8)\
    local size = readString(12)\
    local mtime = readBytes(12)\
    local chksum = readBytes(8)\
    local linkflag = readByte()\
    local linkname = readString(100)\
    local magic = readBytes(6)\
    local version = readBytes(2)\
    local uname = readString(32)\
    local gname = readString(32)\
    local devmajor = readBytes(8)\
    local devminor = readBytes(8)\
    afterFileSkip()\
    if name ~= \"\" then print(\"extracting: \"..name) end\
    if tonumber(string.char(linkflag)) == 5 and not fs.exists(\"/\"..name) then\
      fs.makeDir(\"/\"..name)\
    elseif tonumber(string.char(linkflag)) == 0 then\
      dumpFile(name,octal_to_int(size,11))\
    end\
    local gotit = false\
    if name == \"\" and uname == \"\" and gname == \"\" then\
      gotit = true\
      if blank == 0 then\
        blank = 1\
      elseif blank == 1 then\
        blank = 2\
      end\
    end\
    if gotit == false then\
      blank = 0\
    end\
    name = \"\"\
  end\
  blank = 0\
  while blank ~=2 do\
    readFileHeader()\
    --os.pullEvent()\
    sleep(0.05)\
  end\
  file.close()\
end\
\
local function pack()\
  local function getFileSize(file)\
    --try fs.getSize and if it is > 512 then return else read manually\
    local size = fs.getSize(file)\
    if size < 513 then\
      --read file manually\
      size = 0\
      local curf = fs.open(file,\"rb\")\
      local n = curf.read(1)\
      while n do\
        size = size + 1\
        n = curf.read(1)\
      end\
      curf.close()\
      size = size + #fs.getName(file)\
    end\
    return size\
  end\
  --get time\
  local time\
  if not http then\
    Print(\"Please enabe the http api\")\
    Print(\"Using an old time as a fall back\")\
    time = 1397584826\
  else\
    print(\"grabbing time...\")\
    time = 1548620598\
  end\
  --local time = \"1397584826\"\
  print(\"done\")\
  --you have to go through each folder first and make those\
  local file = fs.open(argv[3],\"wb\")\
  local folders = {}\
  local entries = {}\
  local function getFolders(path,folder)\
    local files = fs.list(path..folder)\
    folders[#folders+1] = path..folder\
    local curfolders = {}\
    for i = 1,#files do\
      if fs.isDir(path..folder..\"/\"..files[i]) then\
        curfolders[#curfolders+1] = files[i]\
      else\
        entries[#entries+1] = path..folder..\"/\"..files[i]\
      end\
    end\
    for i = 1,#curfolders do\
      getFolders(path..folder..\"/\",curfolders[i])\
    end\
  end\
  --file writing helper functions\
  local fileBuffer = {}\
  local function flushFile() for i = 1,#fileBuffer do file.write(fileBuffer[i]) end if #fileBuffer%512 ~= 0 then for i = 1, 512-(#fileBuffer%512) do file.write(0) end end fileBuffer = {} end\
  local function writeByte(byte) fileBuffer[#fileBuffer+1] = byte end\
  local function writeString(str,size) for i = 1,#str do writeByte(string.byte(str:sub(i,i))) end for i = 1,size-#str do writeByte(0) end end\
  local function writeCharBytes(tab) for i = 1,#tab do writeByte(string.byte(tab[i])) end end\
  local function writeBytes(tab) for i = 1,#tab do writeByte(tab[i]) end end\
  local function basen(n,b) n = math.floor(n) if not b or b == 10 then return tostring(n) end local digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ; local t = {} ; local sign = \"\" if n < 0 then sign = \"-\" ; n = -n end repeat local d = (n % b) + 1 ; n = math.floor(n / b) ; table.insert(t, 1, digits:sub(d,d)) until n == 0 return sign .. table.concat(t,\"\") end\
  local function writeOctal(num,size) local str = basen(num,8) ; str = string.rep(\" \",(size-1)-#str)..str..\" \" ; writeString(tostring(str),12) end\
\
  local function addFile(isdir,file)\
    --make a standard file header\
    if isdir then\
      writeString(file..\"/\",100)--name\
      writeCharBytes({\" \",\" \",\" \",\"7\",\"5\",\"5\",\" \",string.char(0)})\
      writeCharBytes({\" \",\" \",\" \",\" \",\" \",\"0\",\" \",string.char(0),\" \",\" \",\" \",\" \",\" \",\"0\",\" \",string.char(0)})\
      writeOctal(0,12)--size\
      writeOctal(time,12)--mtime\
      writeString(\"       \",8)--chksum\
      writeByte(string.byte(\"5\"))\
    else\
      writeString(file,100)--name\
      writeCharBytes({\" \",\" \",\" \",\"6\",\"4\",\"4\",\" \",string.char(0)})\
      writeCharBytes({\" \",\" \",\" \",\" \",\" \",\"0\",\" \",string.char(0),\" \",\" \",\" \",\" \",\" \",\"0\",\" \",string.char(0)})\
      writeOctal(getFileSize(file)-#fs.getName(file),12)--size\
      writeOctal(time,12)--mtime\
      writeString(\"       \",8)--chksum\
      writeByte(string.byte(\"0\"))\
    end\
    writeString(\"\",108)--linkname, magic, and version\
    writeString(\"ComputerCraft\",32)\
    writeString(\"CC\",32)\
  end\
  local str = \"\"\
\
  getFolders(\"\",argv[2])\
  for i = 1,#folders do\
    addFile(true,folders[i])\
    --calculate and add checksum\
    local sum = 0\
    for i = 1,#fileBuffer do\
      sum = sum + fileBuffer[i]\
    end\
    str = basen(sum+32,8)\
    str = string.rep(\" \",(7-1)-#str)..str..\" \"\
    for i = 1,7 do\
      fileBuffer[i+148] = string.byte(str:sub(i,i))\
    end\
    flushFile()\
  end\
\
  for i = 1,#entries do\
    addFile(false,entries[i])\
    --calculate and add checksum\
    local sum = 0\
    for j = 1,#fileBuffer do\
      sum = sum + fileBuffer[j]\
    end\
    str = basen(sum+32,8)\
    str = string.rep(\" \",(7-1)-#str)..str..\" \"\
    for j = 1,7 do\
      fileBuffer[j+148] = string.byte(str:sub(j,j))\
    end\
    flushFile()\
    --add the file contents\
    local curfile = fs.open(entries[i],\"rb\")\
    print(entries[i])\
    for j = 1,getFileSize(entries[i]) do\
      writeByte(curfile.read(1))\
    end\
    curfile.close()\
    flushFile()\
    sleep(0.05)\
  end\
  writeByte(0)\
  flushFile()\
  writeByte(0)\
  flushFile()\
  file.close()\
end\
\
if err then\
  --actually do stuffs \
  if string.lower(argv[1]) == \"u\" then\
    unPack()\
  elseif string.lower(argv[1]) == \"c\" then\
    pack()\
  end\
end",
      [ "base64.lua" ] = "function lsh(value,shift)\
	return (value*(2^shift)) % 256\
end\
function rsh(value,shift)\
	return math.floor(value/2^shift) % 256\
end\
function bit(x,b)\
	return (x % 2^b - x % 2^(b-1) > 0)\
end\
function lor(x,y)\
	result = 0\
	for p=1,8 do result = result + (((bit(x,p) or bit(y,p)) == true) and 2^(p-1) or 0) end\
	return result\
end\
\
-- Encoding\
local base64chars = {[0]='A',[1]='B',[2]='C',[3]='D',[4]='E',[5]='F',[6]='G',[7]='H',[8]='I',[9]='J',[10]='K',[11]='L',[12]='M',[13]='N',[14]='O',[15]='P',[16]='Q',[17]='R',[18]='S',[19]='T',[20]='U',[21]='V',[22]='W',[23]='X',[24]='Y',[25]='Z',[26]='a',[27]='b',[28]='c',[29]='d',[30]='e',[31]='f',[32]='g',[33]='h',[34]='i',[35]='j',[36]='k',[37]='l',[38]='m',[39]='n',[40]='o',[41]='p',[42]='q',[43]='r',[44]='s',[45]='t',[46]='u',[47]='v',[48]='w',[49]='x',[50]='y',[51]='z',[52]='0',[53]='1',[54]='2',[55]='3',[56]='4',[57]='5',[58]='6',[59]='7',[60]='8',[61]='9',[62]='-',[63]='_'}\
function encode(data)\
	local bytes = {}\
	local result = \"\"\
	for spos=0,string.len(data)-1,3 do\
		for byte=1,3 do bytes[byte] = string.byte(string.sub(data,(spos+byte))) or 0 end\
		result = string.format('%s%s%s%s%s',result,base64chars[rsh(bytes[1],2)],base64chars[lor(lsh((bytes[1] % 4),4), rsh(bytes[2],4))] or \"=\",((#data-spos) > 1) and base64chars[lor(lsh(bytes[2] % 16,2), rsh(bytes[3],6))] or \"=\",((#data-spos) > 2) and base64chars[(bytes[3] % 64)] or \"=\")\
	end\
	return result\
end\
\
-- Decoding\
local base64bytes = {['A']=0,['B']=1,['C']=2,['D']=3,['E']=4,['F']=5,['G']=6,['H']=7,['I']=8,['J']=9,['K']=10,['L']=11,['M']=12,['N']=13,['O']=14,['P']=15,['Q']=16,['R']=17,['S']=18,['T']=19,['U']=20,['V']=21,['W']=22,['X']=23,['Y']=24,['Z']=25,['a']=26,['b']=27,['c']=28,['d']=29,['e']=30,['f']=31,['g']=32,['h']=33,['i']=34,['j']=35,['k']=36,['l']=37,['m']=38,['n']=39,['o']=40,['p']=41,['q']=42,['r']=43,['s']=44,['t']=45,['u']=46,['v']=47,['w']=48,['x']=49,['y']=50,['z']=51,['0']=52,['1']=53,['2']=54,['3']=55,['4']=56,['5']=57,['6']=58,['7']=59,['8']=60,['9']=61,['-']=62,['_']=63,['=']=nil}\
function decode(data)\
	local chars = {}\
	local result=\"\"\
	for dpos=0,string.len(data)-1,4 do\
		for char=1,4 do chars[char] = base64bytes[(string.sub(data,(dpos+char),(dpos+char)) or \"=\")] end\
		result = string.format('%s%s%s%s',result,string.char(lor(lsh(chars[1],2), rsh(chars[2],4))),(chars[3] ~= nil) and string.char(lor(lsh(chars[2],4), rsh(chars[3],2))) or \"\",(chars[4] ~= nil) and string.char(lor(lsh(chars[3],6) % 192, (chars[4]))) or \"\")\
	end\
	return result\
end\
\
argv = argv or {...}\
EorD = argv[1]\
ForS = argv[2]\
tBE = argv[3]\
if not EorD or not ForS or not tBE then\
	error(\"Usage: Base64 <-E:-D> <-F:-S> <FileName:String>\")\
end\
\
if EorD == \"-E\" or EorD == \"-e\" then\
	if ForS == \"-F\" or ForS == \"-f\" then\
		if fs.exists(tBE) then\
			file = io.open(tBE, \"r\")\
			fileCont = file:read(\"*a\")\
			file:close()\
			encoded = encode(fileCont)\
			encfile = io.open(tBE..\".b64\", \"w\")\
			encfile:write(encoded)\
			encfile:close()\
			print(\"Original File: \"..tBE..\" | Encoded File: \"..tBE..\".b64\")\
		else\
			error(\"File \"..tBE..\" Doesn't Exist\")\
		end\
	elseif ForS == \"-S\" or ForS == \"-s\" then\
		encoded = encode(tBE)\
		print(\"Original: \"..tBE..\" | Encoded: \"..encoded)\
	else\
		error(\"I don't understand: \"..ForS)\
	end\
elseif EorD == \"-D\" or EorD == \"-d\" then\
	if ForS == \"-F\" or ForS == \"-f\" then\
		if fs.exists(tBE) then\
			file = io.open(tBE, \"r\")\
			fileCont = file:read(\"*a\")\
			file:close()\
			decoded = decode(fileCont)\
			decfile = io.open(tBE..\".DECb64\", \"w\")\
			decfile:write(decoded)\
			decfile:close()\
			print(\"Original File: \"..tBE..\" | Decoded File: \"..tBE..\".DECb64\")\
		else\
			error(\"File \"..tBE..\" Doesn't Exist\")\
		end\
	elseif ForS == \"-S\" or ForS == \"-s\" then\
		decoded = decode(tBE)\
		print(\"Original: \"..tBE..\" | Decoded: \"..decoded)\
	else\
		error(\"I don't understand: \"..ForS)\
	end\
else\
	error(\"I don't understand: \"..EorD)\
end",
      autorun = {
        [ "require.lua" ] = "-- -*- coding: utf8 -*-\
-- Copyright (c) 2014 Odd Straaboe <oddstr13 at openshell dot no>\
-- License: MIT - http://opensource.org/licenses/MIT\
-- Filename: require.lua\
\
_G.package = {}\
\
_G.package.cpath = \"\"\
_G.package.loaded = {}\
_G.package.loadlib = function() error(\"NotImplemented: package.loadlib\") end\
_G.package.path = table.concat({\
    \"?\",\
    \"?.lua\",\
    \"?/init.lua\",\
    \"/lib/?\",\
    \"/lib/?.lua\",\
    \"/lib/?/init.lua\",\
    \"/rom/apis/?\",\
    \"/rom/apis/?.lua\",\
    \"/rom/apis/?/init.lua\",\
    \"/rom/apis/turtle/?\",\
    \"/rom/apis/turtle/?.lua\",\
    \"/rom/apis/turtle/?/init.lua\",\
    \"/rom/apis/command/?\",\
    \"/rom/apis/command/?.lua\",\
    \"/rom/apis/command/?/init.lua\",\
    \"/sys/bin/apis/?.lua\",\
}, \";\")\
_G.package.preload = {}\
_G.package.seeall = function(module) error(\"NotImplemented: package.seeall\") end\
_G.module = function(m) error(\"NotImplemented: module\") end\
\
local _package_path_loader = function(name)\
    \
    local fname = name:gsub(\"%.\", \"/\")\
    \
    for pattern in package.path:gmatch(\"[^;]+\") do\
        \
        local fpath = pattern:gsub(\"%?\", fname)\
        \
        if fs.exists(fpath) and not fs.isDir(fpath) then\
            \
            local apienv = {}\
            setmetatable(apienv, {__index = _G})\
            \
            local apifunc, err = loadfile(fpath)\
            local ok\
            \
            if apifunc then\
                setfenv(apifunc, apienv)\
                ok, err = pcall(apifunc)\
            end\
            \
            if not apifunc or not ok then\
                error(\"error loading module '\" .. name .. \"' from file '\" .. fpath .. \"'\\n\\t\" .. err)\
            end\
            \
            local api = {}\
            if type(err) == \"table\" then\
              api = err\
            end\
            for k,v in pairs( apienv ) do\
                api[k] = v\
            end\
            \
            return api\
        end\
    end\
end\
\
_G.package.loaders = {\
    function(name)\
        if package.preload[name] then\
            return package.preload[name]\
        else\
            return \"\\tno field package.preload['\" .. name .. \"']\"\
        end\
    end,\
    \
    function(name)\
        local _errors = {}\
        \
        local fname = name:gsub(\"%.\", \"/\")\
        \
        for pattern in package.path:gmatch(\"[^;]+\") do\
            \
            local fpath = pattern:gsub(\"%?\", fname)\
            if fs.exists(fpath) and not fs.isDir(fpath) then\
                return _package_path_loader\
            else\
                table.insert(_errors, \"\\tno file '\" .. fpath .. \"'\")\
            end\
        end\
        \
        return table.concat(_errors, \"\\n\")\
    end\
}\
\
_G.require = function(name, path)\
    path = path or \"/sys/bin/apis/\"\
    name = path+name\
    if package.loaded[name] then\
        return package.loaded[name]\
    end\
    \
    local _errors = {}\
    \
    for _, searcher in pairs(package.loaders) do\
        local loader = searcher(name)\
        if type(loader) == \"function\" then\
            local res = loader(name)\
            if res ~= nil then\
                package.loaded[name] = res\
            end\
            \
            if package.loaded[name] == nil then\
                package.loaded[name] = true\
            end\
            \
            return package.loaded[name]\
        elseif type(loader) == \"string\" then\
            table.insert(_errors, loader)\
        end\
    end\
\
    error(\"module '\" .. name .. \"' not found:\\n\" .. table.concat(_errors, \"\\n\"))\
end",
      },
      apis = {
        [ "json.lua" ] = "--\
-- json.lua\
--\
-- Copyright (c) 2018 rxi\
--\
-- Permission is hereby granted, free of charge, to any person obtaining a copy of\
-- this software and associated documentation files (the \"Software\"), to deal in\
-- the Software without restriction, including without limitation the rights to\
-- use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\
-- of the Software, and to permit persons to whom the Software is furnished to do\
-- so, subject to the following conditions:\
--\
-- The above copyright notice and this permission notice shall be included in all\
-- copies or substantial portions of the Software.\
--\
-- THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\
-- SOFTWARE.\
--\
\
local json = { _version = \"0.1.1\" }\
\
-------------------------------------------------------------------------------\
-- Encode\
-------------------------------------------------------------------------------\
\
local encode\
\
local escape_char_map = {\
  [ \"\\\\\" ] = \"\\\\\\\\\",\
  [ \"\\\"\" ] = \"\\\\\\\"\",\
  [ \"\\b\" ] = \"\\\\b\",\
  [ \"\\f\" ] = \"\\\\f\",\
  [ \"\\n\" ] = \"\\\\n\",\
  [ \"\\r\" ] = \"\\\\r\",\
  [ \"\\t\" ] = \"\\\\t\",\
}\
\
local escape_char_map_inv = { [ \"\\\\/\" ] = \"/\" }\
for k, v in pairs(escape_char_map) do\
  escape_char_map_inv[v] = k\
end\
\
\
local function escape_char(c)\
  return escape_char_map[c] or string.format(\"\\\\u%04x\", c:byte())\
end\
\
\
local function encode_nil(val)\
  return \"null\"\
end\
\
\
local function encode_table(val, stack)\
  local res = {}\
  stack = stack or {}\
\
  -- Circular reference?\
  if stack[val] then error(\"circular reference\") end\
\
  stack[val] = true\
\
  if val[1] ~= nil or next(val) == nil then\
    -- Treat as array -- check keys are valid and it is not sparse\
    local n = 0\
    for k in pairs(val) do\
      if type(k) ~= \"number\" then\
        error(\"invalid table: mixed or invalid key types\")\
      end\
      n = n + 1\
    end\
    if n ~= #val then\
      error(\"invalid table: sparse array\")\
    end\
    -- Encode\
    for i, v in ipairs(val) do\
      table.insert(res, encode(v, stack))\
    end\
    stack[val] = nil\
    return \"[\" .. table.concat(res, \",\") .. \"]\"\
\
  else\
    -- Treat as an object\
    for k, v in pairs(val) do\
      if type(k) ~= \"string\" then\
        error(\"invalid table: mixed or invalid key types\")\
      end\
      table.insert(res, encode(k, stack) .. \":\" .. encode(v, stack))\
    end\
    stack[val] = nil\
    return \"{\" .. table.concat(res, \",\") .. \"}\"\
  end\
end\
\
\
local function encode_string(val)\
  return '\"' .. val:gsub('[%z\\1-\\31\\\\\"]', escape_char) .. '\"'\
end\
\
\
local function encode_number(val)\
  -- Check for NaN, -inf and inf\
  if val ~= val or val <= -math.huge or val >= math.huge then\
    error(\"unexpected number value '\" .. tostring(val) .. \"'\")\
  end\
  return string.format(\"%.14g\", val)\
end\
\
\
local type_func_map = {\
  [ \"nil\"     ] = encode_nil,\
  [ \"table\"   ] = encode_table,\
  [ \"string\"  ] = encode_string,\
  [ \"number\"  ] = encode_number,\
  [ \"boolean\" ] = tostring,\
}\
\
\
encode = function(val, stack)\
  local t = type(val)\
  local f = type_func_map[t]\
  if f then\
    return f(val, stack)\
  end\
  error(\"unexpected type '\" .. t .. \"'\")\
end\
\
\
function json.encode(val)\
  return ( encode(val) )\
end\
\
\
-------------------------------------------------------------------------------\
-- Decode\
-------------------------------------------------------------------------------\
\
local parse\
\
local function create_set(...)\
  local res = {}\
  for i = 1, select(\"#\", ...) do\
    res[ select(i, ...) ] = true\
  end\
  return res\
end\
\
local space_chars   = create_set(\" \", \"\\t\", \"\\r\", \"\\n\")\
local delim_chars   = create_set(\" \", \"\\t\", \"\\r\", \"\\n\", \"]\", \"}\", \",\")\
local escape_chars  = create_set(\"\\\\\", \"/\", '\"', \"b\", \"f\", \"n\", \"r\", \"t\", \"u\")\
local literals      = create_set(\"true\", \"false\", \"null\")\
\
local literal_map = {\
  [ \"true\"  ] = true,\
  [ \"false\" ] = false,\
  [ \"null\"  ] = nil,\
}\
\
\
local function next_char(str, idx, set, negate)\
  for i = idx, #str do\
    if set[str:sub(i, i)] ~= negate then\
      return i\
    end\
  end\
  return #str + 1\
end\
\
\
local function decode_error(str, idx, msg)\
  local line_count = 1\
  local col_count = 1\
  for i = 1, idx - 1 do\
    col_count = col_count + 1\
    if str:sub(i, i) == \"\\n\" then\
      line_count = line_count + 1\
      col_count = 1\
    end\
  end\
  error( string.format(\"%s at line %d col %d\", msg, line_count, col_count) )\
end\
\
\
local function codepoint_to_utf8(n)\
  -- http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=iws-appendixa\
  local f = math.floor\
  if n <= 0x7f then\
    return string.char(n)\
  elseif n <= 0x7ff then\
    return string.char(f(n / 64) + 192, n % 64 + 128)\
  elseif n <= 0xffff then\
    return string.char(f(n / 4096) + 224, f(n % 4096 / 64) + 128, n % 64 + 128)\
  elseif n <= 0x10ffff then\
    return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,\
                       f(n % 4096 / 64) + 128, n % 64 + 128)\
  end\
  error( string.format(\"invalid unicode codepoint '%x'\", n) )\
end\
\
\
local function parse_unicode_escape(s)\
  local n1 = tonumber( s:sub(3, 6),  16 )\
  local n2 = tonumber( s:sub(9, 12), 16 )\
  -- Surrogate pair?\
  if n2 then\
    return codepoint_to_utf8((n1 - 0xd800) * 0x400 + (n2 - 0xdc00) + 0x10000)\
  else\
    return codepoint_to_utf8(n1)\
  end\
end\
\
\
local function parse_string(str, i)\
  local has_unicode_escape = false\
  local has_surrogate_escape = false\
  local has_escape = false\
  local last\
  for j = i + 1, #str do\
    local x = str:byte(j)\
\
    if x < 32 then\
      decode_error(str, j, \"control character in string\")\
    end\
\
    if last == 92 then -- \"\\\\\" (escape char)\
      if x == 117 then -- \"u\" (unicode escape sequence)\
        local hex = str:sub(j + 1, j + 5)\
        if not hex:find(\"%x%x%x%x\") then\
          decode_error(str, j, \"invalid unicode escape in string\")\
        end\
        if hex:find(\"^[dD][89aAbB]\") then\
          has_surrogate_escape = true\
        else\
          has_unicode_escape = true\
        end\
      else\
        local c = string.char(x)\
        if not escape_chars[c] then\
          decode_error(str, j, \"invalid escape char '\" .. c .. \"' in string\")\
        end\
        has_escape = true\
      end\
      last = nil\
\
    elseif x == 34 then -- '\"' (end of string)\
      local s = str:sub(i + 1, j - 1)\
      if has_surrogate_escape then\
        s = s:gsub(\"\\\\u[dD][89aAbB]..\\\\u....\", parse_unicode_escape)\
      end\
      if has_unicode_escape then\
        s = s:gsub(\"\\\\u....\", parse_unicode_escape)\
      end\
      if has_escape then\
        s = s:gsub(\"\\\\.\", escape_char_map_inv)\
      end\
      return s, j + 1\
\
    else\
      last = x\
    end\
  end\
  decode_error(str, i, \"expected closing quote for string\")\
end\
\
\
local function parse_number(str, i)\
  local x = next_char(str, i, delim_chars)\
  local s = str:sub(i, x - 1)\
  local n = tonumber(s)\
  if not n then\
    decode_error(str, i, \"invalid number '\" .. s .. \"'\")\
  end\
  return n, x\
end\
\
\
local function parse_literal(str, i)\
  local x = next_char(str, i, delim_chars)\
  local word = str:sub(i, x - 1)\
  if not literals[word] then\
    decode_error(str, i, \"invalid literal '\" .. word .. \"'\")\
  end\
  return literal_map[word], x\
end\
\
\
local function parse_array(str, i)\
  local res = {}\
  local n = 1\
  i = i + 1\
  while 1 do\
    local x\
    i = next_char(str, i, space_chars, true)\
    -- Empty / end of array?\
    if str:sub(i, i) == \"]\" then\
      i = i + 1\
      break\
    end\
    -- Read token\
    x, i = parse(str, i)\
    res[n] = x\
    n = n + 1\
    -- Next token\
    i = next_char(str, i, space_chars, true)\
    local chr = str:sub(i, i)\
    i = i + 1\
    if chr == \"]\" then break end\
    if chr ~= \",\" then decode_error(str, i, \"expected ']' or ','\") end\
  end\
  return res, i\
end\
\
\
local function parse_object(str, i)\
  local res = {}\
  i = i + 1\
  while 1 do\
    local key, val\
    i = next_char(str, i, space_chars, true)\
    -- Empty / end of object?\
    if str:sub(i, i) == \"}\" then\
      i = i + 1\
      break\
    end\
    -- Read key\
    if str:sub(i, i) ~= '\"' then\
      decode_error(str, i, \"expected string for key\")\
    end\
    key, i = parse(str, i)\
    -- Read ':' delimiter\
    i = next_char(str, i, space_chars, true)\
    if str:sub(i, i) ~= \":\" then\
      decode_error(str, i, \"expected ':' after key\")\
    end\
    i = next_char(str, i + 1, space_chars, true)\
    -- Read value\
    val, i = parse(str, i)\
    -- Set\
    res[key] = val\
    -- Next token\
    i = next_char(str, i, space_chars, true)\
    local chr = str:sub(i, i)\
    i = i + 1\
    if chr == \"}\" then break end\
    if chr ~= \",\" then decode_error(str, i, \"expected '}' or ','\") end\
  end\
  return res, i\
end\
\
\
local char_func_map = {\
  [ '\"' ] = parse_string,\
  [ \"0\" ] = parse_number,\
  [ \"1\" ] = parse_number,\
  [ \"2\" ] = parse_number,\
  [ \"3\" ] = parse_number,\
  [ \"4\" ] = parse_number,\
  [ \"5\" ] = parse_number,\
  [ \"6\" ] = parse_number,\
  [ \"7\" ] = parse_number,\
  [ \"8\" ] = parse_number,\
  [ \"9\" ] = parse_number,\
  [ \"-\" ] = parse_number,\
  [ \"t\" ] = parse_literal,\
  [ \"f\" ] = parse_literal,\
  [ \"n\" ] = parse_literal,\
  [ \"[\" ] = parse_array,\
  [ \"{\" ] = parse_object,\
}\
\
\
parse = function(str, idx)\
  local chr = str:sub(idx, idx)\
  local f = char_func_map[chr]\
  if f then\
    return f(str, idx)\
  end\
  decode_error(str, idx, \"unexpected character '\" .. chr .. \"'\")\
end\
\
\
function json.decode(str)\
  if type(str) ~= \"string\" then\
    error(\"expected argument of type string, got \" .. type(str))\
  end\
  local res, idx = parse(str, next_char(str, 1, space_chars, true))\
  idx = next_char(str, idx, space_chars, true)\
  if idx <= #str then\
    decode_error(str, idx, \"trailing garbage\")\
  end\
  return res\
end\
\
\
return json",
        [ "pfs.lua" ] = "local upFS = _G.fs\
\
local pFS = {}\
\
function pFS.list(drv, path)\
    return fs.list(\"/sys/disks/\" .. drv .. \"/\" .. path)\
end\
\
function pFS.exists(drv, path)\
    return fs.exists(\"/sys/disks/\" .. drv .. \"/\" .. path)\
end\
\
function pFS.isDir(drv, path)\
    return fs.isDir(\"/sys/disks/\" .. drv .. \"/\" .. path)\
end\
\
function pFS.isReadOnly(drv, path)\
    return fs.isReadOnly(\"/sys/disks/\" .. drv .. \"/\" .. path)\
end\
\
function pFS.getName(drv, path)\
    return fs.getName(\"/sys/disks/\" .. drv .. \"/\" .. path)\
end\
\
function pFS.getDrive(drv, path)\
    return fs.getDrive(\"/sys/disks/\" .. drv .. \"/\" .. path)\
end\
\
function pFS.getSize(drv, path)\
    return fs.getSize(\"/sys/disks/\" .. drv .. \"/\" .. path)\
end\
\
function pFS.getFreeSpace(drv, path)\
    return fs.getFreeSpace(\"/sys/disks/\" .. drv .. \"/\" .. path)\
end\
\
function pFS.makeDir(drv, path)\
    return fs.makeDir(\"/sys/disks/\" .. drv .. \"/\" .. path)\
end\
\
function pFS.move(drv, fromPath, toPath)\
    return fs.move(\"/sys/disks/\" .. drv .. \"/\" .. fromPath, \"/sys/disks/\" .. drv .. \"/\" .. toPath)\
end\
\
function pFS.copy(drv, fromPath, toPath)\
    return fs.copy(\"/sys/disks/\" .. drv .. \"/\" .. fromPath, \"/sys/disks/\" .. drv .. \"/\" .. toPath)\
end\
\
function pFS.delete(drv, path)\
    return fs.delete(\"/sys/disks/\" .. drv .. \"/\" .. path)\
end\
\
function pFS.combine(drv, path, localPath)\
    return fs.combine(\"/sys/disks/\" .. drv .. \"/\" .. path, localPath)\
end\
\
function pFS.open(drv, path, mode)\
    return fs.open(\"/sys/disks/\" .. drv .. \"/\" .. path, mode)\
end\
\
function pFS.find(drv, wildcard)\
    return fs.find(\"/sys/disks/\" .. drv .. \"/\" .. path)\
end\
\
function pFS.findDisks(wildcard)\
    return fs.find(\"/sys/disks/*/\" .. path)\
end\
\
function pFS.getDir(drv, path)\
    return fs.getDir(\"/sys/disks/\" .. drv .. \"/\" .. path)\
end\
\
function pFS.complete(drv, partial, path)\
    return fs.complete(\"/sys/disks/\" .. drv .. \"/\" .. partial, path)\
end\
\
return pFS",
      },
      [ "bios.lua" ] = "settings.load(\"/sys/conf/main.lua\")\
term.setBackgroundColor(colors.blue)\
term.setTextColor(colors.white)\
shell.setPath(shell.path() .. \":/sys/bin/\")\
term.clear()\
term.setCursorPos(1, 1)\
local biosAccess = settings.get(\"bios.biosAccess\") == \"true\"\
\
write(\"Press space to enter BIOS\")\
local timerId = os.startTimer(tonumber(settings.get(\"bios.delay\")))\
while true do\
    local e, id = os.pullEvent()\
    if e == 'timer' and id == timerId then\
        break\
    end\
    if e == 'char' then\
        biosAccess = true\
        break\
    end\
end\
\
if settings.get(\"bios.defaultOS\") == \"\" or biosAccess then\
    -- if true then\
    term.clear()\
    term.setCursorPos(1, 1)\
    local FileList = fs.list(\"/sys/os/\")\
    \
    print(\"OS List:\")\
    for _, file in ipairs(FileList) do\
        print(file)\
    end\
    \
    term.setCursorPos(1, 19)\
    term.write(\"Enter OS: \")\
    local osSel = read()\
    \
    if fs.exists(\"/sys/os/\" .. osSel .. \"/startup.lua\") then\
        term.setBackgroundColor(colors.black);\
        term.clear()\
        \
        shell.run(\"/sys/os/\" .. osSel .. \"/startup.lua\")\
    end\
    \
    print(\"Press Enter to continue\");\
    read()\
else\
    term.clear()\
    term.setCursorPos(1, 1)\
    if fs.exists(\"/sys/os/\" .. settings.get(\"bios.defaultOS\") .. \"/startup.lua\") then\
        term.setBackgroundColor(colors.black);\
        term.clear()\
        \
        shell.run(\"/sys/os/\" .. settings.get(\"bios.defaultOS\") .. \"/startup.lua\")\
    end\
end\
os.reboot()",
      [ "settings.lua" ] = "local running = true\
settings.load(\"/sys/conf/main.lua\")\
while running do\
    write(\"$ \")\
    local cmd = read()\
    if cmd == \"g\" then\
        local inp = read()\
        print(settings.get(inp))\
    \
    elseif cmd == \"s\" then\
        local inp = read()\
        local inp2 = read()\
        settings.set(inp, inp2)\
        print(\"Set \" .. inp .. \" to value \" .. inp2)\
    \
    elseif cmd == \"x\" then\
        settings.save(\"/sys/conf/main.lua\")\
        running = false\
    \
    elseif cmd == \"l\" then\
        local list = settings.getNames()\
        for _, file in ipairs(list) do\
            print(file)\
        end\
    end\
end",
    },
  },
  [ "startup.lua" ] = "fs.makeDir(\"/sys/\")\
\
dirs = {\
    'bin',\
    'os',\
    'disks',\
    'conf'\
}\
\
for folder = 1, #dirs do\
    fs.makeDir(\"/sys/\" .. dirs[folder] .. \"/\")\
\
    local fileList = fs.list(\"/disk/sys/\" .. dirs[folder])\
    \
    for _, file in ipairs(fileList) do\
        fs.copy(\"/disk/sys/\".. dirs[folder] ..\"/\" .. file, \"/sys/\".. dirs[folder] ..\"/\" .. file)\
        print(\"Installing /sys/\".. dirs[folder] ..\"/\" .. file)\
    end\
end\
\
fs.copy(\"/disk/biosloop.lua\", \"/startup.lua\")\
print(\"Finised Installation.\")\
print(\"Remove installation media and press enter.\")\
read()\
os.reboot()",
  [ "biosloop.lua" ] = "local FileList = fs.list(\"/sys/bin/autorun\")\
\
for _, file in ipairs(FileList) do\
    dofile(\"/sys/bin/autorun/\"..file)\
end\
\
while true do\
    shell.run(\"/sys/bin/bios.lua\")\
end\
 ",
}